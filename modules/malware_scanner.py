import os
import threading
import tkinter as tk
from tkinter import filedialog, messagebox
import ttkbootstrap as ttkB
import pyclamd

# Define the MalwareScanner class
class MalwareScanner:
    def __init__(self):
        try:
            self.clamd = pyclamd.ClamdAgnostic()
        except Exception as e:
            messagebox.showerror("Connection Error", f"Could not connect to ClamAV: {str(e)}")
            exit()

        self.stop_flag = threading.Event()

    # Function to scan a file using ClamAV
    def scan_file(self, file_path):
        if self.stop_flag.is_set():
            return
        
        result = self.clamd.scan_file(file_path)
        if result and file_path in result:
            scan_result, scan_info = result[file_path]
            if scan_result == 'FOUND':
                print(f"Malware found in file: {file_path}\nType: {scan_info}")
                
                MalwareScannerGUI.process_info_label.config(text=f"Malware found in file: {file_path}\nType: {scan_info}")
            else:
                print(f"No malware found in file: {file_path}")
                #MalwareScannerGUI.process_info_label.config(text=f"No Malware found in file: {file_path}\nType: {scan_info}")
    # Function to scan a directory
    def scan_directory(self, directory_path):
        for root, dirs, files in os.walk(directory_path):
            for file_name in files:
                # Check if stop_flag is set
                if self.stop_flag.is_set():
                    print("Scan stopped.")
                    return
                
                file_path = os.path.join(root, file_name)
                self.scan_file(file_path)

    # Function to perform a full system scan
    def full_scan(self):
        root_path = os.path.abspath('/')
        self.scan_directory(root_path)

    # Function to stop the scanning process
    def stop_scan(self):
        self.stop_flag.set()
        print("Stopping the scan...")

# Define the GUI class for the malware scanner
class MalwareScannerGUI:
    def __init__(self):
        self.scanner = MalwareScanner()
        self.root = ttkB.Window(themename='solar')
        self.setup_gui()
        
        self.scanner.gui = self

    def setup_gui(self):
        self.root.title("Malware Scanner")
        self.root.geometry('400x150')
        self.root.maxsize(height='150', width='400')
        self.root.minsize(height='150', width='40')

        display = ttkB.Label(self.root, text='Scan for Malware', font='bold 15')
        display.place(x=55, y=10)

        choose_button = ttkB.Button(self.root, text="Scan Directory", command=self.choose_directory, style='info.TButton')
        choose_button.place(y=50, x=20)

        full_scan_button = ttkB.Button(self.root, text="Full Scan", command=self.full_scan, style='success.TButton')
        full_scan_button.place(y=50, x=160, width=100)

        stop_scan_button = ttkB.Button(self.root, text="Stop Scan", command=self.scanner.stop_scan, style='warning.TButton')
        stop_scan_button.place(y=50, x=280, width=100)

        self.process_info_label = ttkB.Label(self.root, text='Performance Info')
        self.process_info_label.place(x=30, y=100)

        # Exit button
        exit_button = ttkB.Button(self.root, text='Exit', underline=0, style='info.Outline.TButton', command=self.root.quit)
        exit_button.place(x=330, y=100)

        self.root.mainloop()

    def choose_directory(self):
        directory_path = filedialog.askdirectory()
        if directory_path:
            self.scanner.stop_flag.clear()
            threading.Thread(target=self.scanner.scan_directory, args=(directory_path,)).start()

    def full_scan(self):
        self.scanner.stop_flag.clear()
        threading.Thread(target=self.scanner.full_scan).start()
        

def main():
    gui = MalwareScannerGUI()

if __name__ == "__main__":
    main()
